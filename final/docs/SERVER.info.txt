Antes de describir las responsibilidades de cada entidad del script server.py es importante aclarar que se va a utilizar una base de datos relacional, la cual contiene tres tablas: Preguntas, Respuestas y Jugadores. La tabla Preguntas contiene 15 preguntas de cultura general y sus respectivos id (clave primaria). La tabla Respuestas está compuesta por 30 registros, correspondientes a las 15 preguntas (ya que cada pregunta cuenta con dos opciones posibles). Cada registro contiene los atributos id (clave primaria), pregunta_id (clave foránea de la tabla Preguntas), respuesta y correcta (booleano que indica si la respuesta es la opción correcta o no). Finalmente, la tabla Jugadores es inicializada vacía y almacena el id (clave primaria), dirección, puerto y alias del cliente que se conecta al servidor para jugar, así como su último puntaje obtenido en el juego. Dicha base de datos es creada por el script trivia.py .

Dicho esto, procedemos a describir la responsabilidad de cada entidad del programa:

Proceso Main

- Verifica si existe un archivo llamado 'log.txt' en el directorio donde se encuentra el archivo 'server.py'. Si el archivo existe, se abre en modo de adición para agregar nueva información; si no existe, se crea uno nuevo. Este archivo es utilizado para registrar todas las veces que se levanta el servidor, así como para llevar un registro de los usuarios que ingresan y salen durante dicha sesión (cabe mencionar que la responsabilidad de registrar a los usuarios no corresponde al proceso Main).

- Como veremos más adelante, el archivo log.txt será utilizado por varios procesos, lo que lo convierte en un recurso compartido. Para garantizar el acceso concurrente seguro a este recurso, el Main crea un objeto Lock(). Este objeto Lock() se utilizará para proteger el archivo log.txt y será heredada por los procesos hijos del Main.

- Lanza dos hilos: uno para aceptar conexiones ipv4 y otro para aceptar conexiones ipv6. Así el programa puede manejar conexiones entrantes para ambos protocolos al mismo tiempo, lo que significa que puede procesar múltiples solicitudes de conexión simultáneamente. 

- Cada vez que un cliente intenta establecer una conexión con el servidor, el proceso principal (Main) genera un nuevo proceso hijo para atender a dicho cliente. De esta manera, si se conectan tres clientes (Pepe con IPv4, Juan con IPv6 y Raúl con IPv4), el proceso principal tendrá tres procesos hijos. Juan será atendido por Hijo1 Thread1 (ya que se conectó con IPv6), Pepe será atendido por Hijo2 Thread2 y Raúl será atendido por Hijo3 Thread1. Va a haber tantos Hijos como clientes hayan.

Proceso Hijo

- Escribe en el archivo log.txt cada vez que un cliente establece conexión con el servidor, abandona o finaliza una partida. El archivo log.txt es un recurso compartido, por lo que cada proceso Hijo debe solicitar el acceso antes de escribir en él. Si se otorga el acceso, el proceso que lo adquirió bloqueará el recurso compartido para que ningún otro proceso (por ejemplo, otro Hijo) pueda utilizarlo al mismo tiempo. Si el acceso no se otorga, el proceso debe esperar a que el proceso que está utilizando el archivo log.txt lo libere antes de intentar acceder nuevamente. Para poder realizar esto se utiliza el Lock() que definió el proceso Main() (padre de Hijo) al comienzo del programa.

- Verifica si el alias del cliente existe en la tabla 'Jugadores' de la base de datos y, posteriormente, verifica si la contraseña ingresada es correcta. Si la contraseña es incorrecta, el servidor finaliza la conexión. Si el alias no existe en la base de datos, se crea un nuevo usuario. Para llevar a cabo estas operaciones, el Hijo establece una conexión con la base de datos que es cerrada inmediatamente después de que el usuario haya ingresado al juego.

- Crea dos Pipes para establecer la comunicación con el proceso Nieto, que es el hijo del proceso Hijo que se describirá a continuación. Es importante destacar que estas tuberías son unidireccionales, por lo que el Hijo recibe datos a través de r1 (el extremo de lectura del Pipe1) y escribe en w2 (el extremo de escritura del Pipe2). Por otro lado, el proceso Nieto escribe en w1 y recibe datos por r2.

- Cuando se inicia el juego, es responsabilidad del proceso Hijo interactuar con el cliente, presentándole una pregunta, brindándole las opciones posibles y recibiendo la respuesta del cliente. Sin embargo, es importante destacar que el proceso Hijo no es responsable de obtener la pregunta y sus opciones desde la base de datos. Esta tarea recae en el proceso Nieto. De esta forma, el proceso Nieto se encarga de recuperar la información necesaria desde la BD y enviarla al proceso Hijo a través del Pipe correspondiente. Una vez finalizadas las cinco preguntas, el Hijo le muestra al cliente el puntaje obtenido y la posición en el ranking que ocupa.

- El proceso Hijo y el proceso Nieto intercambian información a lo largo del juego. El Hijo envía un mensaje al Nieto cada vez que necesita una pregunta y le envía el puntaje obtenido una vez finalizado el juego. Por otro lado, el Hijo recibe información como las preguntas (con sus respectivas opciones) y el ranking actualizado.

- Una vez que termina la conexión con el cliente, le manda una señal SIGTERM a Nieto para que este muera. Luego muere él.

Proceso Nieto

- Interactúa con la BD. Establece una conexión con la base de datos para: 
		
		obtener las preguntas y sus opciones.
		
		actualizar el puntaje del cliente una respondidas las cinco preguntas.
		
		obtener el ranking actualizado. 
		
- Una vez obtenido el ranking cierra la conexión con la BD y posteriormente muere ya que recibe ula señal SIGTERM de parte de Hijoo.

- La información con el proceso Hijo la intercambia a través de Pipes como se describió anteriormente.